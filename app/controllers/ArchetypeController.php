<?php

namespace App\Controllers;

use App\Models\Archetype;
use App\Models\ArchetypeComment;
use App\Core\Controller;
use App\Core\View;
use App\Services\GeminiService;

class ArchetypeController extends Controller
{
    private $geminiService;

    public function __construct()
    {
        parent::__construct(); // Call parent constructor if it exists
        // Check if GEMINI_API_KEY is set before instantiating
        if (!empty(getenv('GEMINI_API_KEY'))) {
            try {
                \$this->geminiService = new GeminiService();
            } catch (\Exception $e) {
                \$this->geminiService = null;
                error_log('Failed to initialize GeminiService: ' . $e->getMessage());
            }
        } else {
            \$this->geminiService = null;
            // Log or handle the absence of API key, e.g., disable AI features
            error_log('GEMINI_API_KEY is not set. AI features in ArchetypeController will be limited.');
        }
    }
    public function index()
    {
        $archetypes = Archetype::orderBy('name')->get();
        View::render('archetypes/index', ['archetypes' => $archetypes, 'title' => 'Archetype Hubs']);
    }

    public function show($slug)
    {
        $archetype = Archetype::findBySlug($slug);
        if (!$archetype) {
            View::render('archetypes/show', ['archetype' => null, 'title' => 'Archetype Not Found']);
            return;
        }
        $comments = $archetype->comments()->where('is_moderated', true)->orderBy('created_at', 'desc')->get();
        $famousPeople = $archetype->celebrities()->orderBy('name')->get();
        $user = null;
        $hasActiveSubscription = false;
        $referralUrl = null;
        $hasEnoughReferrals = false;
        $remainingReferrals = 3;
        if (isset($_SESSION['user_id'])) {
            $user = \App\Models\User::findById($_SESSION['user_id']);
            if ($user) {
                $hasActiveSubscription = $user->hasActiveSubscription();
                // Archetype-specific referral
                $referral = \App\Models\Referral::createForUser($user->id, 'archetype-unlock', $archetype->id);
                $referralUrl = $referral->getReferralUrl();
                $hasEnoughReferrals = $referral->hasEnoughReferrals(3);
                $remainingReferrals = max(0, 3 - $referral->successful_referrals);
            }
        }
        
        // Generate premium archetype insights for subscribers or users with enough referrals
        $premiumArchetypeContent = null;
        if ($hasActiveSubscription || $hasEnoughReferrals) {
            try {
                $geminiService = new \App\Services\GeminiService();
                $prompt = "Generate insightful content for the '{$archetype->name}' archetype, described as: '{$archetype->description}'. Explore its characteristics, strengths, and shadows. Format as a detailed, engaging paragraph.";
                $premiumArchetypeContent = $geminiService->generateArchetypeInsights($prompt);
            } catch (Exception $e) {
                error_log('Error generating premium archetype content: ' . $e->getMessage());
                $premiumArchetypeContent = null;
            }
        }
        
        View::render('archetypes/show', [
            'archetype' => $archetype,
            'comments' => $comments,
            'famousPeople' => $famousPeople,
            'title' => $archetype->name . ' - Archetype Hub',
            'user' => $user,
            'hasActiveSubscription' => $hasActiveSubscription,
            'referralUrl' => $referralUrl,
            'hasEnoughReferrals' => $hasEnoughReferrals,
            'remainingReferrals' => $remainingReferrals,
            'premiumArchetypeContent' => $premiumArchetypeContent
        ]);
    }

    // Method to show the form for creating a new archetype
    public function create()
    {
        // Ensure user is admin or has permission -  Skipping auth for brevity here
        View::render('archetypes/create', ['title' => 'Create New Archetype']);
    }

    // Method to store a new archetype
    public function store()
    {
        // Skipping auth and validation for brevity
        \$name = $_POST['name'] ?? null;
        \$description = $_POST['description'] ?? null;

        if (empty(\$name) || empty(\$description)) {
            $_SESSION['flash_message'] = ['type' => 'error', 'message' => 'Name and description are required.'];
            // Redirect back to create form, potentially with old input
            header('Location: /archetypes/create');
            exit;
        }

        \$archetype = Archetype::create([
            'name' => sanitize_input(\$name),
            'description' => sanitize_input(\$description),
            // Slug will be generated by the model's boot method or a mutator
        ]);

        if (\$archetype && \$archetype->id) {
            if (\$this->geminiService) { // Check if service was initialized
                \$this->generateAndStoreAiContent(\$archetype);
            }
            $_SESSION['flash_message'] = ['type' => 'success', 'message' => 'Archetype created successfully!'];
            header('Location: /archetypes/' . \$archetype->slug);
            exit;
        } else {
            $_SESSION['flash_message'] = ['type' => 'error', 'message' => 'Failed to create archetype.'];
            header('Location: /archetypes/create');
            exit;
        }
    }

    private function generateAndStoreAiContent(Archetype \$archetype)
    {
        if (!\$this->geminiService) {
             error_log('GeminiService not available. Skipping AI content generation for archetype: ' . \$archetype->name);
             return;
        }

        try {
            // Generate AI content using Gemini
            \$prompt = "Generate insightful content for the '{\$archetype->name}' archetype, described as: '{\$archetype->description}'. Explore its characteristics, strengths, and shadows. Format as a detailed, engaging paragraph.";
            \$aiContent = \$this->geminiService->generateArchetypeInsights(\$prompt);
            
            if (\$aiContent) {
                \$archetype->ai_generated_content = json_encode(['content' => \$aiContent]);
                // Assuming Archetype model has a save method or updates are handled by ::create or an update method
                // If Archetype::create returns the full object, and it has an ID, we might need to fetch it again or use an update method.
                // For simplicity, let's assume the model instance is usable for update here.
                // This might require an explicit $archetype->update(['ai_generated_content' => json_encode($aiContent)]); or $archetype->save();
                // depending on the ORM/Model structure.
                // Let's assume a simple save() method exists on the model instance for now.
                
                // Re-fetch to ensure we have the latest version before updating, or use a dedicated update method.
                \$dbArchetype = Archetype::find(\$archetype->id);
                if (\$dbArchetype) {
                    \$dbArchetype->ai_generated_content = json_encode(['content' => \$aiContent]);
                    \$dbArchetype->save(); // This save needs to persist the change.
                }
            }
        } catch (\Exception \$e) {
            error_log('Error generating AI content for archetype ' . \$archetype->id . ': ' . \$e->getMessage());
        }
    }

    public function storeComment($archetypeSlug)
    {
        // Ensure user is logged in
        if (!isset($_SESSION['user_id'])) {
            // Redirect to login or show an error
            // For now, just a simple redirect
            header('Location: /login');
            exit;
        }

        $archetype = Archetype::findBySlug($archetypeSlug);
        if (!$archetype) {
            // Handle archetype not found
            // Potentially set a flash message and redirect back
            header('Location: /archetypes');
            exit;
        }

        // Basic validation
        if (empty($_POST['comment'])) {
            // Set a flash message for error
            $_SESSION['flash_message'] = ['type' => 'error', 'message' => 'Comment cannot be empty.'];
            header('Location: /archetypes/' . $archetypeSlug);
            exit;
        }

        ArchetypeComment::create([
            'archetype_id' => $archetype->id,
            'user_id' => $_SESSION['user_id'],
            'comment' => sanitize_input($_POST['comment'] ?? ''),
            'is_moderated' => false, // Comments require moderation by default
        ]);

        // Set a flash message for success
        $_SESSION['flash_message'] = ['type' => 'success', 'message' => 'Your comment has been submitted and is awaiting moderation.'];
        header('Location: /archetypes/' . $archetypeSlug);
        exit;
    }
}