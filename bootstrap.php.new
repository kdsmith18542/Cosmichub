<?php
/**
 * Bootstrap file for the application
 *
 * This file initializes the application and sets up autoloading.
 */

// Enable error reporting
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('display_startup_errors', '1');
ini_set('log_errors', '1');

// Debug: Output a message to verify the script is running
echo '<!-- Bootstrap.php is starting -->';

// Debug: Output PHP version and other environment information
echo '<!-- PHP Version: ' . phpversion() . ' -->';
echo '<!-- Current working directory: ' . getcwd() . ' -->';

// Define application paths
define('ROOT_DIR', dirname(__DIR__));
define('APP_DIR', ROOT_DIR . '/app');
define('CONFIG_DIR', APP_DIR . '/config');
define('VIEWS_DIR', APP_DIR . '/views');
define('VIEWS_PATH', VIEWS_DIR); // Alias for compatibility
define('STORAGE_DIR', ROOT_DIR . '/storage');
define('LOGS_DIR', STORAGE_DIR . '/logs');

// Set the default timezone
date_default_timezone_set('UTC');

// Ensure storage and logs directories exist
if (!is_dir(STORAGE_DIR)) {
    mkdir(STORAGE_DIR, 0755, true);
}
if (!is_dir(LOGS_DIR)) {
    mkdir(LOGS_DIR, 0755, true);
}

// Set up error logging
$logFile = LOGS_DIR . '/php_errors.log';
ini_set('error_log', $logFile);

// Log startup
file_put_contents($logFile, "[" . date('Y-m-d H:i:s') . "] Application started\n", FILE_APPEND);

// Simple error handler to ensure we capture all errors
set_error_handler(function($errno, $errstr, $errfile, $errline) use ($logFile) {
    $message = sprintf(
        '[%s] %s: %s in %s on line %d',
        date('Y-m-d H:i:s'),
        $errno,
        $errstr,
        $errfile,
        $errline
    );
    
    error_log($message);
    
    // Also write to the log file directly
    file_put_contents($logFile, $message . PHP_EOL, FILE_APPEND);
    
    // Don't execute PHP internal error handler
    return true;
});

// Log uncaught exceptions
set_exception_handler(function($exception) use ($logFile) {
    $message = sprintf(
        "[%s] Uncaught Exception: %s in %s on line %d\nStack trace:\n%s",
        date('Y-m-d H:i:s'),
        $exception->getMessage(),
        $exception->getFile(),
        $exception->getLine(),
        $exception->getTraceAsString()
    );
    
    error_log($message);
    
    // Also write to the log file directly
    file_put_contents($logFile, $message . PHP_EOL, FILE_APPEND);
    
    // Display a user-friendly error message
    if (ini_get('display_errors')) {
        echo '<h1>500 Internal Server Error</h1>';
        echo '<p>An error occurred while processing your request.</p>';
        if (ini_get('display_errors') === '1') {
            echo '<pre>' . htmlspecialchars($message) . '</pre>';
        }
    }
});

// Enable output buffering to prevent any accidental output
ob_start();

// Debug: Output the paths for verification
echo '<!-- ROOT_DIR: ' . ROOT_DIR . ' -->';
echo '<!-- APP_DIR: ' . APP_DIR . ' -->';

// Debug: Check if ClassLoader.php exists
$classLoaderPath = APP_DIR . '/libraries/Core/ClassLoader.php';
echo '<!-- Looking for ClassLoader at: ' . $classLoaderPath . ' -->';

if (file_exists($classLoaderPath)) {
    echo '<!-- ClassLoader found, including... -->';
    require_once $classLoaderPath;
    
    // Create and register the autoloader
    $loader = new App\Libraries\Core\ClassLoader();
    
    // Register the base directory for the 'App' namespace
    $loader->addNamespace('App', APP_DIR);
    
    // Register the autoloader
    $loader->register(true);
    
    // Debug: Check if the Router class can be found
    if (class_exists('App\\Libraries\\Router')) {
        echo '<!-- Router class loaded successfully -->';
    } else {
        echo '<!-- Error: Router class not found -->';
    }
} else {
    die('Error: ClassLoader not found at ' . $classLoaderPath);
}

// Load the configuration file
$configFile = CONFIG_DIR . '/config.php';
if (file_exists($configFile)) {
    require_once $configFile;
} else {
    die('Configuration file not found: ' . $configFile);
}

// Load the application
require_once APP_DIR . '/app.php';

// Start the application
$app = new App();
$app->run();
